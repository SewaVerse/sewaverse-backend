// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  password      String?
  userProfileId String?   @db.ObjectId
  userType      UserType  @default(INDIVIDUAL)

  image       String?
  acceptTerms Boolean

  accessToken String?
  expires     DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userProfile UserProfile? @relation(fields: [userProfileId], references: [id])

  roles            UserRoleMapping[]
  accounts         Account[]
  serviceProviders ServiceProvider[]
  bookings         Booking[]
  sessions         Session[]
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  otp     String?
  expires DateTime

  @@unique([email, token])
}

model UserProfile {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  dob         String?
  imageId     String? @db.ObjectId
  gender      Gender?
  address     String?
  phoneNumber String

  file File? @relation(fields: [imageId], references: [id], onDelete: Cascade)

  users User[]
}

model UserRoleMapping {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  role   Role   @default(USER)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, role])
}

model Service {
  id              String  @id @default(auto()) @map("_id") @db.ObjectId
  name            String  @unique
  description     String?
  parentServiceId String? @db.ObjectId // Made nullable for root services

  imageId  String? @db.ObjectId
  isActive Boolean @default(true)

  // Self-relation for parent and child services
  parentService Service? @relation("ServiceHierarchy", fields: [parentServiceId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  file File? @relation(fields: [imageId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  services        Service[]        @relation("ServiceHierarchy")
  offeredServices OfferedService[]
}

model ServiceProvider {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId

  name    String
  imageId String? @db.ObjectId
  email   String
  contact String
  address String

  providerType UserType

  isVerified       Boolean @default(false)
  isProfileVerfied Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user            User             @relation(fields: [userId], references: [id])
  file            File?            @relation(fields: [imageId], references: [id])
  companyDetails  CompanyDetails[]
  offeredServices OfferedService[]
}

model CompanyDetails {
  id                String @id @default(auto()) @map("_id") @db.ObjectId
  serviceProviderId String @db.ObjectId

  registrationNumber    String  @unique
  contactPersonName     String?
  contactPersonPosition String?
  secondaryContact      String?

  serviceProvider ServiceProvider @relation(fields: [serviceProviderId], references: [id])
}

model OfferedService {
  id                String @id @default(auto()) @map("_id") @db.ObjectId
  serviceProviderId String @db.ObjectId
  serviceId         String @db.ObjectId

  price          String
  location       String
  workExperience String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  service         Service         @relation(fields: [serviceId], references: [id])
  serviceProvider ServiceProvider @relation(fields: [serviceProviderId], references: [id])
  bookings        Booking[]
}

model File {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  type     String
  size     Int
  url      String?
  localUrl String?

  createdAt DateTime @default(now())

  fileBinaries     FileBinary[]
  serviceProviders ServiceProvider[]
  userProfiles     UserProfile[]
  services         Service[]
}

model FileBinary {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  fileId String @db.ObjectId
  data   Bytes?

  file File @relation(fields: [fileId], references: [id], onDelete: Cascade)
}

model Booking {
  id               String @id @default(auto()) @map("_id") @db.ObjectId
  userId           String @db.ObjectId
  offeredServiceId String @db.ObjectId

  status BookingStatus @default(PENDING)

  bookingDate DateTime

  location  String
  createdAt DateTime @default(now())

  user           User           @relation(fields: [userId], references: [id])
  offeredService OfferedService @relation(fields: [offeredServiceId], references: [id])

  @@index([userId]) // Optimize queries by user
  @@index([offeredServiceId]) // Optimize queries by service
  @@index([status]) // Optimize status-based queries
}

model QueuedEmail {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  from            String
  to              String
  subject         String
  body            String
  createdAt       DateTime  @default(now())
  sentTries       Int       @default(0)
  sentAt          DateTime?
  sendImmediately Boolean   @default(false)
}

enum Role {
  USER
  ADMIN
  SERVICE_PROVIDER
}

enum Gender {
  MALE
  FEMALE
  OTHERS
}

enum UserType {
  INDIVIDUAL
  COMPANY
}

enum BookingStatus {
  PENDING
  CONFIRMED
  COMPLETED
  CANCELED
}
