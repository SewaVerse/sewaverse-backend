// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  password      String?
  userProfileId String?   @db.ObjectId
  userType      UserType  @default(INDIVIDUAL)

  image       String?
  acceptTerms Boolean @default(false)

  accessToken String?
  expires     DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userProfile UserProfile? @relation(fields: [userProfileId], references: [id])

  roles            UserRoleMapping[]
  accounts         Account[]
  serviceProviders ServiceProvider[]
  bookings         Booking[]
  sessions         Session[]
  reviews          Review[]
  ratings          Rating[]
  services         Service[]
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  token   String   @unique
  otp     String?
  expires DateTime

  @@unique([email, token])
}

model UserProfile {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  dob         String?
  imageId     String? @db.ObjectId
  gender      Gender?
  phoneNumber String

  file File? @relation(fields: [imageId], references: [id], onDelete: Cascade)

  users     User[]
  addresses UserAddressMapping[]
}

model UserRoleMapping {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  role   Role   @default(USER)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, role])
}

model Service {
  id              String  @id @default(auto()) @map("_id") @db.ObjectId
  name            String  @unique
  description     String?
  parentServiceId String? @db.ObjectId // Made nullable for root services

  imageId  String? @db.ObjectId
  isActive Boolean @default(true)

  // Self-relation for parent and child services
  parentService Service? @relation("ServiceHierarchy", fields: [parentServiceId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  file File? @relation(fields: [imageId], references: [id])

  createdBy String   @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  services        Service[]        @relation("ServiceHierarchy")
  createdUser     User             @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  offeredServices OfferedService[]
  workExperiences WorkExperience[]
  serviceMappings ProviderProfileServiceMapping[]
}

model ServiceProvider {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @unique @db.ObjectId

  name String

  email     String
  profileId String? @db.ObjectId

  providerType     UserType @default(INDIVIDUAL)
  verificationStep Int      @default(0)
  isVerified       Boolean  @default(false)
  isAdminVerified  Boolean  @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])

  companyDetails        CompanyDetails[]
  verificationDocuments VerificationDocument[]
  addresses             ServiceProviderAddressMapping[]
  offeredServices       OfferedService[]
  serviceLocations      ServiceLocation[]
  profiles              ServiceProviderProfile[]
}

model ServiceProviderProfile {
  id                 String   @id @default(auto()) @map("_id") @db.ObjectId
  serviceProviderId  String   @unique @db.ObjectId
  dob                String
  gender             Gender
  profession         String?
  skills             String[]
  imageId            String?  @db.ObjectId
  serviceSubCategory String[]
  overallRating      Float    @default(0)
  totalRatings       Int      @default(0)
  about              String?
  experience         String
  location           String[]

  file            File?            @relation(fields: [imageId], references: [id])
  serviceProvider ServiceProvider? @relation(fields: [serviceProviderId], references: [id], onDelete: Cascade)

  workExperiences WorkExperience[]
  licenses        License[]
  awards          Award[]
  myWorks         MyWork[]
  serviceMappings ProviderProfileServiceMapping[]
}


model ProviderProfileServiceMapping {
  id                 String   @id @default(auto()) @map("_id") @db.ObjectId
  profileId          String   @db.ObjectId
  serviceId          String   @db.ObjectId


  profile           ServiceProviderProfile @relation(fields: [profileId], references: [id])
  service           Service                @relation(fields: [serviceId], references: [id])

}

model CompanyDetails {
  id                String @id @default(auto()) @map("_id") @db.ObjectId
  serviceProviderId String @db.ObjectId

  contactPersonName        String?
  contactPersonDesignation String?
  contactNumber            String?

  serviceProvider ServiceProvider @relation(fields: [serviceProviderId], references: [id])
}

model Country {
  id                 String  @id @default(auto()) @map("_id") @db.ObjectId
  name               String  @unique
  twoLetterIsoCode   String  @unique
  threeLetterIsoCode String? @unique
  numericIsoCode     String? @unique
  callingCode        String? @unique
  published          Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  stateProvinces StateProvince[]
}

model StateProvince {
  id           String  @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  abbreviation String?
  countryId    String  @db.ObjectId
  published    Boolean

  country Country @relation(fields: [countryId], references: [id])

  districts District[]
  Address   Address[]

  @@unique([countryId, name])
}

model District {
  id              String  @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  stateProvinceId String  @db.ObjectId
  published       Boolean

  stateProvince StateProvince @relation(fields: [stateProvinceId], references: [id], onDelete: Cascade)

  municipalities Municipality[]
  Address        Address[]

  @@unique([stateProvinceId, name])
}

model Municipality {
  id         String           @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  type       MunicipalityType
  districtId String           @db.ObjectId
  published  Boolean

  district District @relation(fields: [districtId], references: [id], onDelete: Cascade)

  wards   Int[]
  Address Address[]

  @@unique([districtId, name])
}

model Address {
  id             String  @id @default(auto()) @map("_id") @db.ObjectId
  provinceId     String  @db.ObjectId
  districtId     String  @db.ObjectId
  municipalityId String  @db.ObjectId
  wardNo         Int
  tole           String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  province     StateProvince @relation(fields: [provinceId], references: [id], onDelete: Restrict)
  district     District      @relation(fields: [districtId], references: [id], onDelete: Restrict)
  municipality Municipality  @relation(fields: [municipalityId], references: [id], onDelete: Restrict)

  addresses                UserAddressMapping[]
  serviceProviderAddresses ServiceProviderAddressMapping[]
}

model UserAddressMapping {
  id            String @id @default(auto()) @map("_id") @db.ObjectId
  userProfileId String @db.ObjectId
  addressId     String @db.ObjectId

  userProfile UserProfile @relation(fields: [userProfileId], references: [id], onDelete: Cascade)
  address     Address     @relation(fields: [addressId], references: [id], onDelete: NoAction)

  @@unique([userProfileId, addressId])
}

model ServiceProviderAddressMapping {
  id                String @id @default(auto()) @map("_id") @db.ObjectId
  serviceProviderId String @db.ObjectId
  addressId         String @db.ObjectId

  serviceProvider ServiceProvider @relation(fields: [serviceProviderId], references: [id], onDelete: Cascade)
  address         Address         @relation(fields: [addressId], references: [id])

  @@unique([serviceProviderId, addressId])
}

model VerificationDocument {
  id                String                   @id @default(auto()) @map("_id") @db.ObjectId
  serviceProviderId String                   @db.ObjectId
  documentType      VerificationDocumentType
  documentNo        String?
  frontFileId       String?                  @db.ObjectId
  backFileId        String?                  @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  frontFile       File?           @relation("FrontFile", fields: [frontFileId], references: [id])
  backFile        File?           @relation("BackFile", fields: [backFileId], references: [id])
  serviceProvider ServiceProvider @relation(fields: [serviceProviderId], references: [id], onDelete: Cascade)

  @@unique([documentType, documentNo])
  @@index([serviceProviderId])
}

model OfferedService {
  id                String @id @default(auto()) @map("_id") @db.ObjectId
  serviceProviderId String @db.ObjectId
  serviceId         String @db.ObjectId

  title       String
  description String

  price          Float
  priceType      PriceType
  discount       Float?
  location       String?
  workExperience String?
  overallRating  Float     @default(0)
  published      Boolean   @default(true)
  adminVerified  Boolean   @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  service         Service         @relation(fields: [serviceId], references: [id])
  serviceProvider ServiceProvider @relation(fields: [serviceProviderId], references: [id])

  images   OfferedServiceImageMapping[]
  bookings Booking[]
  ratings  Rating[]
  reviews  Review[]
}

model OfferedServiceImageMapping {
  id               String @id @default(auto()) @map("_id") @db.ObjectId
  offeredServiceId String @db.ObjectId
  imageId          String @db.ObjectId

  offeredService OfferedService @relation(fields: [offeredServiceId], references: [id], onDelete: Cascade)
  image          File           @relation(fields: [imageId], references: [id])

  @@index([offeredServiceId])
}

model ServiceLocation {
  id                String @id @default(auto()) @map("_id") @db.ObjectId
  serviceProviderId String @db.ObjectId
  area              String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  serviceProvider ServiceProvider @relation(fields: [serviceProviderId], references: [id])
}

model WorkExperience {
  id                String    @id @default(auto()) @map("_id") @db.ObjectId
  providerProfileId String    @db.ObjectId
  jobTitle          String
  company           String
  duration          String
  description       String?
  startDate         DateTime?
  endDate           DateTime?
  isCurrent         Boolean?
  serviceId         String    @db.ObjectId
  fileId            String?   @db.ObjectId
  showFile          Boolean   @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  service                Service                @relation(fields: [serviceId], references: [id])
  file                   File?                  @relation(fields: [fileId], references: [id])
  serviceProviderProfile ServiceProviderProfile @relation(fields: [providerProfileId], references: [id], onDelete: Cascade)
}

model License {
  id                String @id @default(auto()) @map("_id") @db.ObjectId
  providerProfileId String @db.ObjectId
  licenseOf         String
  licenseFrom       String
  licenseNumber     String @unique

  fileId String? @db.ObjectId

  file                   File?                  @relation(fields: [fileId], references: [id])
  serviceProviderProfile ServiceProviderProfile @relation(fields: [providerProfileId], references: [id], onDelete: Cascade)
}

model Award {
  id                String @id @default(auto()) @map("_id") @db.ObjectId
  providerProfileId String @db.ObjectId
  title             String
  year              String
  awardFrom         String

  fileId String? @db.ObjectId

  file                   File?                  @relation(fields: [fileId], references: [id])
  serviceProviderProfile ServiceProviderProfile @relation(fields: [providerProfileId], references: [id], onDelete: Cascade)
}

model MyWork {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  title             String
  description       String?
  providerProfileId String  @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  serviceProviderProfile ServiceProviderProfile @relation(fields: [providerProfileId], references: [id], onDelete: Cascade)

  workImages WorkImageMapping[]
}

model WorkImageMapping {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  workId  String @db.ObjectId
  imageId String @db.ObjectId

  work  MyWork @relation(fields: [workId], references: [id])
  image File   @relation(fields: [imageId], references: [id])
}

model File {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  type     String
  size     Int
  url      String?
  localUrl String?

  createdAt DateTime @default(now())

  fileBinaries     FileBinary[]
  providerProfiles ServiceProviderProfile[]
  userProfiles     UserProfile[]
  services         Service[]

  // Relations for front and back files
  frontDocuments VerificationDocument[] @relation("FrontFile")
  backDocuments  VerificationDocument[] @relation("BackFile")

  workExperiences WorkExperience[]
  licenses        License[]
  awards          Award[]
  workImages      WorkImageMapping[]
  offeredImages   OfferedServiceImageMapping[]
}

model FileBinary {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  fileId String @db.ObjectId
  data   Bytes?

  file File @relation(fields: [fileId], references: [id], onDelete: Cascade)
}

model Booking {
  id               String @id @default(auto()) @map("_id") @db.ObjectId
  userId           String @db.ObjectId
  offeredServiceId String @db.ObjectId

  status BookingStatus @default(PENDING)

  bookingDate DateTime

  location  String
  createdAt DateTime @default(now())

  user           User           @relation(fields: [userId], references: [id])
  offeredService OfferedService @relation(fields: [offeredServiceId], references: [id])

  @@index([userId]) // Optimize queries by user
  @@index([offeredServiceId]) // Optimize queries by service
  @@index([status]) // Optimize status-based queries
}

model Rating {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  userId           String   @db.ObjectId
  offeredServiceId String   @db.ObjectId
  rating           Int
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  user           User           @relation(fields: [userId], references: [id])
  offeredService OfferedService @relation(fields: [offeredServiceId], references: [id])
}

model Review {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  userId           String   @db.ObjectId
  offeredServiceId String   @db.ObjectId
  reviewText       String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  user           User           @relation(fields: [userId], references: [id])
  offeredService OfferedService @relation(fields: [offeredServiceId], references: [id])
}

model QueuedEmail {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  from            String
  to              String
  subject         String
  body            String
  createdAt       DateTime  @default(now())
  sentTries       Int       @default(0)
  sentAt          DateTime?
  sendImmediately Boolean   @default(false)
}

enum Role {
  USER
  ADMIN
  SERVICE_PROVIDER
}

enum Gender {
  MALE
  FEMALE
  OTHERS
}

enum UserType {
  INDIVIDUAL
  COMPANY
}

enum VerificationDocumentType {
  CITIZENSHIP
  NATIONAL_IDENTITY_CARD
  DRIVING_LICENSE
  CERTIFICATE
  PAN_VAT
}

enum PriceType {
  HOURLY
  TASK
  SESSION
  UNIT
  PROJECT
}

enum MunicipalityType {
  METROPOLITAN
  SUB_METROPOLITAN
  MUNICIPALITY
  RURAL_MUNICIPALITY
}

enum BookingStatus {
  PENDING
  CONFIRMED
  COMPLETED
  CANCELED
}
